// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsQuickStartVpc
{
    [AwsQuickStartVpcResourceType("aws-quickstart-vpc:index:Vpc")]
    public partial class Vpc : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The IPs of the EIPs associated with the Nat Gateways
        /// </summary>
        [Output("natGatewayIPs")]
        public Output<ImmutableArray<string>> NatGatewayIPs { get; private set; } = null!;

        /// <summary>
        /// The IDs of the Private Subnets Created
        /// </summary>
        [Output("privateSubnetIDs")]
        public Output<ImmutableArray<string>> PrivateSubnetIDs { get; private set; } = null!;

        /// <summary>
        /// The IDs of the Public Subnets Created
        /// </summary>
        [Output("publicSubnetIDs")]
        public Output<ImmutableArray<string>> PublicSubnetIDs { get; private set; } = null!;

        /// <summary>
        /// The VPC ID
        /// </summary>
        [Output("vpcID")]
        public Output<string> VpcID { get; private set; } = null!;


        /// <summary>
        /// Create a Vpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vpc(string name, VpcArgs args, ComponentResourceOptions? options = null)
            : base("aws-quickstart-vpc:index:Vpc", name, args ?? new VpcArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class VpcArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZoneConfig", required: true)]
        private List<Inputs.AvailabilityZoneArgs>? _availabilityZoneConfig;

        /// <summary>
        /// The list of Configurations in which to create subnets. You can specify availability
        /// zone with a private or a public subnet cidr block. You can also associated a private
        /// subnet with a dedicated network ACL.
        /// </summary>
        public List<Inputs.AvailabilityZoneArgs> AvailabilityZoneConfig
        {
            get => _availabilityZoneConfig ?? (_availabilityZoneConfig = new List<Inputs.AvailabilityZoneArgs>());
            set => _availabilityZoneConfig = value;
        }

        /// <summary>
        /// CIDR block for the VPC
        /// </summary>
        [Input("cidrBlock", required: true)]
        public string CidrBlock { get; set; } = null!;

        /// <summary>
        /// Set to `true` to create a network ACL protected subnet in each Availability Zone. If `false`, the CIDR parameters for those subnets will be ignored.
        /// If `true`, it also requires that the 'Create private subnets' parameter is also `true` to have any effect.
        /// Default is `true`
        /// </summary>
        [Input("createAdditionalPrivateSubnets")]
        public bool? CreateAdditionalPrivateSubnets { get; set; }

        /// <summary>
        /// Enable Flow Logs to capture IP traffic for the VPC. Defaults to `true`
        /// </summary>
        [Input("createFlowLogs")]
        public bool? CreateFlowLogs { get; set; }

        /// <summary>
        /// Set to `false` when creating only private subnets. If `true`, both CreatePublicSubnets and CreatePrivateSubnets must also be `true`.
        /// Default is `true`
        /// </summary>
        [Input("createNatGateways")]
        public bool? CreateNatGateways { get; set; }

        /// <summary>
        /// Set to `false` to create only public subnets. If `false`, the CIDR parameters for ALL private subnets will be ignored.
        /// Default is `true`.
        /// </summary>
        [Input("createPrivateSubnets")]
        public bool? CreatePrivateSubnets { get; set; }

        /// <summary>
        /// Set to `false` to create only private subnets. If `false`, CreatePrivateSubnets must be `true` and the CIDR parameters for ALL public subnets will be
        /// ignored. Default is `true`
        /// </summary>
        [Input("createPublicSubnets")]
        public bool? CreatePublicSubnets { get; set; }

        /// <summary>
        /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults `false`.
        /// </summary>
        [Input("enableDnsHostnames")]
        public bool? EnableDnsHostnames { get; set; }

        /// <summary>
        /// A boolean flag to enable/disable DNS support in the VPC. Defaults true.
        /// </summary>
        [Input("enableDnsSupport")]
        public bool? EnableDnsSupport { get; set; }

        /// <summary>
        /// The fields to include in the flow log record, in the order in which they should appear. Specify the fields using the ${field-id} format,
        /// separated by spaces. Default is
        /// `${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}`
        /// </summary>
        [Input("flowLogsLogFormat")]
        public string? FlowLogsLogFormat { get; set; }

        /// <summary>
        /// The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds
        /// (1 minute) or 600 seconds (10 minutes). Default is `600`
        /// </summary>
        [Input("flowLogsMaxAggregationInterval")]
        public double? FlowLogsMaxAggregationInterval { get; set; }

        /// <summary>
        /// Number of days to retain the VPC Flow Logs in CloudWatch. Defaults to `14`.
        /// </summary>
        [Input("flowLogsRetentionPeriodInDays")]
        public double? FlowLogsRetentionPeriodInDays { get; set; }

        /// <summary>
        /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
        /// Default is `REJECT`.
        /// </summary>
        [Input("flowLogsTrafficType")]
        public string? FlowLogsTrafficType { get; set; }

        /// <summary>
        /// The allowed tenancy of instances launched into the VPC. Defaults to `default`.
        /// </summary>
        [Input("instanceTenancy")]
        public string? InstanceTenancy { get; set; }

        public VpcArgs()
        {
        }
        public static new VpcArgs Empty => new VpcArgs();
    }
}
